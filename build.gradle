apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'co.paralleluniverse.photon.Photon'
version = "0.2.0"

ext.licenseName    = "Apache License, Version 2.0"
ext.licenseUrl     = "http://www.apache.org/licenses/LICENSE-2.0"
ext.quasarVersion = '0.7.2'
ext.comsatVersion = '0.4.0'

ext.jettyVersion  = '9.2.10.v20150310'

repositories {
    mavenLocal();
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

configurations {
    quasar
    capsule
    capsuleOsv
    capsuleMaven
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        force 'org.slf4j:slf4j-api:1.7.12'
        force 'com.google.guava:guava:18.0'
        force 'org.ow2.asm:asm:5.0.4'
        force 'org.ow2.asm:asm-commons:5.0.4'
    }
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "co.paralleluniverse:quasar-core:$quasarVersion"
    compile "co.paralleluniverse:comsat-httpclient:$comsatVersion"    
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.hdrhistogram:HdrHistogram:2.1.3'
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.0-rc1"
    runtime "org.apache.logging.log4j:log4j-api:2.0-rc1"
    runtime "org.apache.logging.log4j:log4j-core:2.0-rc1"

    capsule 'co.paralleluniverse:capsule:1.0-rc2-SNAPSHOT'
    capsuleMaven 'co.paralleluniverse:capsule-maven:1.0-rc2-SNAPSHOT'
    capsuleOsv 'co.paralleluniverse:capsule-osv:0.1.0-SNAPSHOT'

    quasar  "co.paralleluniverse:quasar-core:$quasarVersion"
}

run {
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}" // =v, =d, =c
    jvmArgs '-server'
    jvmArgs '-Xmx4096m'
    jvmArgs "-XX:+UseG1GC","-XX:MaxGCPauseMillis=200"
    systemProperty "log4j.configurationFile", "log4j.xml"    
    //    jvmArgs "-ea"
    classpath = sourceSets.main.runtimeClasspath   
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
}

def getDependencies(config) {
    return config.getAllDependencies().collect { 
        def res = it.group + ':' + it.name + ':' + it.version + (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '')
        if(!it.excludeRules.isEmpty()) {
            res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
        }
        return res
    }
}

task capsule(type: Jar, dependsOn: classes) {
    archiveName = "photon.jar"
    from sourceSets.main.output // this way we don't need to extract

    from { configurations.capsule.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleMaven.collect { zipTree(it) } } // we need all of Capsule's classes
    from 'log4j.xml'

    manifest {
        attributes(
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Extract-Capsule'   : 'false', // don't extract capsule to the filesystem
            'Min-Java-Version'  : '1.8.0',
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
//            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
            'Dependencies'      : getDependencies(configurations.runtime).join(' '),
            'Repositories'      : 'central https://oss.sonatype.org/content/repositories/snapshots',

            'Caplets'           : 'MavenCapsule'
        )
    }
}

task fatCapsule(type: Jar, dependsOn: jar) {
    archiveName = "photon.jar"

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies
    from 'log4j.xml'

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes(
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Min-Java-Version'  : '1.8.0',
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
//            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
        )
    }
}

task osvCapsule(type: Jar, dependsOn: classes) {
    archiveName = "photon.jar"
    from sourceSets.main.output // this way we don't need to extract

    from { configurations.capsule.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleOsv.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleMaven.collect { zipTree(it) } } // we need all of Capsule's classes
    from 'log4j.xml'

    manifest {
        attributes(
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Extract-Capsule'   : 'false', // don't extract capsule to the filesystem
            'Min-Java-Version'  : '1.8.0',
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
//            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
            'Dependencies'      : getDependencies(configurations.runtime).join(' '),
            'Repositories'      : 'central https://oss.sonatype.org/content/repositories/snapshots',

            'Caplets'           : 'MavenCapsule OsvCapsule'
        )
    }
}

task osvFatCapsule(type: Jar, dependsOn: jar) {
    archiveName = "photon.jar"

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies
    from 'log4j.xml'

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class
    from { configurations.capsuleOsv.collect { zipTree(it) } } // we need all of Capsule's classes

    manifest {
        attributes(
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Min-Java-Version'  : '1.8.0',
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
//            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),

            'Caplets'           : 'OsvCapsule'
        )
    }
}

apply plugin: 'license'
license {
    header rootProject.file('LICENSE')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    strictCheck true
    skipExistingHeaders true
    mapping('java','SLASHSTAR_STYLE')
}

// needed to the license plugin
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
    }
}  
